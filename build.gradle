import java.time.ZoneOffset
import java.time.ZonedDateTime

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.opensearch.gradle:build-tools:${project.property('opensearch.version')}"
    }
}

plugins {
    id "org.sonarqube" version "3.4.0.2513"
    id "io.codearte.nexus-staging" version "0.30.0"
    id "org.xbib.gradle.plugin.jflex" version "1.6.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "2.5.2.1"
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'org.xbib.gradle.plugin.jflex'
apply plugin: 'opensearch.rest-resources'

ext {
    pluginName = 'bundle'
    pluginClassname  = 'org.xbib.opensearch.plugin.bundle.BundlePlugin'
    pluginDescription = 'A bundle of plugins for Opensearch'
    user = 'jprante'
    name = 'opensearch-plugin-bundle'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

sourceSets {
    main {
        java {
            srcDir "build/generated-src/jflex"
        }
    }
}

opensearchplugin {
    description 'Plugin bundle for Opensearch'
    name 'opensearch-plugin-bundle'
    classname 'org.xbib.opensearch.plugin.bundle.BundlePlugin'
}

dependencies {
    implementation "com.ibm.icu:icu4j:${project.property('icu4j.version')}"
    implementation "org.xbib:standardnumber:${project.property('standardnumber.version')}"
    testImplementation "org.opensearch.plugin:analysis-common:${project.property('opensearch.version')}"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.compilerArgs = [
            "-Xlint:-try"
    ]
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.compilerArgs = [
            "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked",
            "-proc:none"
    ]
}

javadoc {
    enabled = true
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest {
        attributes(
                'Implementation-Title': "${project.group}#${project.name};${project.version}",
                'Implementation-Version': "${project.version}",
                'Implementation-Vendor': "${user}",
                'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                'Build-Java-Version': System.getProperty("java.version"),
                'X-Compile-Source-JDK': compileJava.targetCompatibility,
                'X-Compile-Target-JDK': compileJava.sourceCompatibility,
                'X-Compile-Opensearch-Version': project.property('opensearch.version'),
                'X-Compile-Lucene-Version': project.property('lucene.version'),
                'X-Compile-Opensearch-Snapshot': false
        )
    }
}

clean {
    delete fileTree('.') { include '.local*.log' }
}

artifacts {
    archives sourcesJar, javadocJar
}

restResources {
    restApi {
        includeCore '_common', 'indices', 'index', 'search'
    }
}

/*
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}
*/
/*
task xbibUpload(type: Upload) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('xbibUsername')) {
            mavenDeployer {
                configuration = configurations.wagon
                repository(url: uri(project.property('xbibUrl'))) {
                    authentication(userName: xbibUsername, privateKey: xbibPrivateKey)
                }
                pom.project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                }
            }
        }
    }
}
*/
/*task sonatypeUpload(type: Upload) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('ossrhUsername')) {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: uri(ossrhReleaseUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: uri(ossrhSnapshotUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                    name project.name
                    description pluginDescription
                    packaging 'jar'
                    inceptionYear '2012'
                    url scmUrl
                    organization {
                        name 'xbib'
                        url 'http://xbib.org'
                    }
                    developers {
                        developer {
                            id user
                            name 'JÃ¶rg Prante'
                            email 'joergprante@gmail.com'
                            url 'https://github.com/jprante'
                        }
                    }
                    scm {
                        url scmUrl
                        connection scmConnection
                        developerConnection scmDeveloperConnection
                    }
                    licenses {
                        license {
                            name 'Affero GNU Public License Version 3'
                            url 'http://www.gnu.org/licenses/agpl-3.0.html'
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
*/

sonarqube {
    properties {
        property "sonar.projectName", "${project.group} ${project.name}"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", "src/test/java"
        property "sonar.scm.provider", "git"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/test/"
    }
}

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

//checkstyleMain.source = 'src/main/java'
// we use @Ignore
forbiddenApisTest.enabled = false
forbiddenPatterns.exclude('**/*.txt', '**/*.brk', '**/*.fst', '**/*.tree', '**/*.nrm')
licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
loggerUsageCheck.enabled = false
testingConventions.enabled = false
validateNebulaPom.enabled = false
